/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Swapper, SwapperInterface } from "../../src/Swapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotGCC",
    type: "error",
  },
  {
    inputs: [],
    name: "PrecisionLossLeadToUnderflow",
    type: "error",
  },
  {
    inputs: [],
    name: "GCC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNISWAP_ROUTER",
    outputs: [
      {
        internalType: "contract IUniswapRouterV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNISWAP_V2_FACTORY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNISWAP_V2_PAIR",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToRetire",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalReservesOfToken",
        type: "uint256",
      },
    ],
    name: "findOptimalAmountToRetire",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "retireGCC",
    outputs: [
      {
        internalType: "uint256",
        name: "usdcReceivedTimesTwo",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "retireUSDC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101206040526040516112bc3803806112bc83398101604081905261002391610066565b336080526001600160a01b0393841660a05290831660e05290821660c05216610100526100b7565b80516001600160a01b0381168114610061575f80fd5b919050565b5f805f8060808587031215610079575f80fd5b6100828561004b565b93506100906020860161004b565b925061009e6040860161004b565b91506100ac6060860161004b565b905092959194509250565b60805160a05160c05160e051610100516111066101b65f395f818161019001528181610200015261076301525f60f301525f818161014201528181610350015281816104bd0152818161058d01528181610635015281816108b701528181610a2401528181610ad60152610b8401525f818160b401528181610298015281816104640152818161055e0152818161068401528181610825015281816108e9015281816109780152610bb301525f8181610169015281816101be015281816102c201528181610382015281816104110152818161066201528181610721015281816107fb015281816109cb01528181610aa70152610bd401526111065ff3fe608060405234801561000f575f80fd5b5060043610610085575f3560e01c8063b6312e2811610058578063b6312e281461012a578063d82649201461013d578063dc847fbb14610164578063f40acc3d1461018b575f80fd5b8063675907141461008957806389a30271146100af57806399d8fae3146100ee578063ab575ea014610115575b5f80fd5b61009c610097366004610dd8565b6101b2565b6040519081526020015b60405180910390f35b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a6565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b610128610123366004610dd8565b610716565b005b61009c610138366004610def565b610c83565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fc5760405163ceaef86560e01b815260040160405180910390fd5b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561025a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061027e9190610e2a565b506001600160701b031691506001600160701b031691505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316106102f557816102f7565b825b90505f670de0b6b3a76400006103226103108289610e8a565b610138670de0b6b3a764000086610e8a565b61032c9190610ea1565b90505f6103398288610ec0565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018a90529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303815f875af11580156103ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ee9190610ed3565b506040805160028082526060820183525f926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000815f8151811061044257610442610f0d565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061049657610496610f0d565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81525f917f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906104fa9087908590879030904290600401610f21565b5f604051808303815f875af1158015610515573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261053c9190810190610f90565b90505f8160018151811061055257610552610f0d565b602002602001015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016105de9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af11580156105fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061e9190610ed3565b5060405162e8e33760e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e8e33700906106b8907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090899087905f90819030904290600401611049565b6060604051808303815f875af11580156106d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106f89190611092565b5050508060026107089190610e8a565b9a9950505050505050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461075f5760405163ceaef86560e01b815260040160405180910390fd5b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156107bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e19190610e2a565b506001600160701b031691506001600160701b031691505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031610610858578161085a565b825b90505f69d3c21bcecceda10000006108896108758288610e8a565b61013869d3c21bcecceda100000086610e8a565b6108939190610ea1565b90505f6108a08287610ec0565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018990529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303815f875af1158015610931573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109559190610ed3565b506040805160028082526060820183525f926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000815f815181106109a9576109a9610f0d565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106109fd576109fd610f0d565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81525f917f000000000000000000000000000000000000000000000000000000000000000016906338ed173990610a619087908590879030904290600401610f21565b5f604051808303815f875af1158015610a7c573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610aa39190810190610f90565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f000000000000000000000000000000000000000000000000000000000000000083600181518110610b0857610b08610f0d565b60200260200101516040518363ffffffff1660e01b8152600401610b419291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015610b5d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b819190610ed3565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e337007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008685600181518110610c0757610c07610f0d565b60200260200101515f8030426040518963ffffffff1660e01b8152600401610c36989796959493929190611049565b6060604051808303815f875af1158015610c52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c769190611092565b5050505050505050505050565b5f80610c8e83610d34565b610c999060016110bd565b90505f610cc8610cac85623cda29610e8a565b610cb987623cda20610e8a565b610cc391906110bd565b610d34565b90505f610cd7856107cd610e8a565b90506107ca610ce68385610e8a565b821115610d0557604051623220bf60e61b815260040160405180910390fd5b5f8183610d128688610e8a565b610d1c9190610ec0565b610d269190610ea1565b955050505050505b92915050565b60b581600160881b8110610d4d5760409190911b9060801c5b69010000000000000000008110610d695760209190911b9060401c5b650100000000008110610d815760109190911b9060201c5b63010000008110610d975760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b5f60208284031215610de8575f80fd5b5035919050565b5f8060408385031215610e00575f80fd5b50508035926020909101359150565b80516001600160701b0381168114610e25575f80fd5b919050565b5f805f60608486031215610e3c575f80fd5b610e4584610e0f565b9250610e5360208501610e0f565b9150604084015163ffffffff81168114610e6b575f80fd5b809150509250925092565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610d2e57610d2e610e76565b5f82610ebb57634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115610d2e57610d2e610e76565b5f60208284031215610ee3575f80fd5b81518015158114610ef2575f80fd5b9392505050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015610f6f5784516001600160a01b031683529383019391830191600101610f4a565b50506001600160a01b03969096166060850152505050608001529392505050565b5f6020808385031215610fa1575f80fd5b825167ffffffffffffffff80821115610fb8575f80fd5b818501915085601f830112610fcb575f80fd5b815181811115610fdd57610fdd610ef9565b8060051b604051601f19603f8301168101818110858211171561100257611002610ef9565b60405291825284820192508381018501918883111561101f575f80fd5b938501935b8285101561103d57845184529385019392850192611024565b98975050505050505050565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b5f805f606084860312156110a4575f80fd5b8351925060208401519150604084015190509250925092565b80820180821115610d2e57610d2e610e7656fea2646970667358221220bbed4c11be479f00dd60b04b12337b36cb2267607381f81dfbd863703c21d55664736f6c63430008150033";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdc: string,
    router: string,
    factory: string,
    pair: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Swapper> {
    return super.deploy(
      _usdc,
      router,
      factory,
      pair,
      overrides || {}
    ) as Promise<Swapper>;
  }
  override getDeployTransaction(
    _usdc: string,
    router: string,
    factory: string,
    pair: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _usdc,
      router,
      factory,
      pair,
      overrides || {}
    );
  }
  override attach(address: string): Swapper {
    return super.attach(address) as Swapper;
  }
  override connect(signer: Signer): Swapper__factory {
    return super.connect(signer) as Swapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new utils.Interface(_abi) as SwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Swapper {
    return new Contract(address, _abi, signerOrProvider) as Swapper;
  }
}
