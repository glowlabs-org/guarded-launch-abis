/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  GCASalaryHelper,
  GCASalaryHelperInterface,
} from "../../../src/MinerPoolAndGCA/GCASalaryHelper";

const _abi = [
  {
    inputs: [],
    name: "CannotSetNonceToZero",
    type: "error",
  },
  {
    inputs: [],
    name: "HashesNotUpdated",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidGCAHash",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRelaySignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidShares",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUserIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "SlashedAgentCannotClaimReward",
    type: "error",
  },
  {
    inputs: [],
    name: "CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REWARDS_PER_SECOND_FOR_ALL",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SHARES_REQUIRED_PER_COMP_PLAN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "amountWithdrawnAtPaymentNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "paymentNonce",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "activeGCAsAtPaymentNonce",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "userIndex",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimFromInflation",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "claimPayout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "paymentNonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "relayNonce",
        type: "uint256",
      },
    ],
    name: "createRelayDigest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "paymentNonce",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "activeGCAsAtPaymentNonce",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "userIndex",
        type: "uint256",
      },
    ],
    name: "getPayoutData",
    outputs: [
      {
        internalType: "uint256",
        name: "withdrawableAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slashableAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAlreadyWithdrawn",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isSlashed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nextRelayNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "paymentNonceToCompensationPlan",
    outputs: [
      {
        internalType: "uint32[5]",
        name: "",
        type: "uint32[5]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "paymentNonceToShiftStartTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "payoutNonceToGCAHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class GCASalaryHelper__factory {
  static readonly abi = _abi;
  static createInterface(): GCASalaryHelperInterface {
    return new utils.Interface(_abi) as GCASalaryHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GCASalaryHelper {
    return new Contract(address, _abi, signerOrProvider) as GCASalaryHelper;
  }
}
