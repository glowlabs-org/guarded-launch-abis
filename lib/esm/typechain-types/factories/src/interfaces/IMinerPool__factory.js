/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, utils } from "ethers";
const _abi = [
    {
        inputs: [],
        name: "AlreadyMintedToCarbonCreditAuction",
        type: "error",
    },
    {
        inputs: [],
        name: "BucketAlreadyDelayed",
        type: "error",
    },
    {
        inputs: [],
        name: "BucketNotFinalized",
        type: "error",
    },
    {
        inputs: [],
        name: "CallerNotEarlyLiquidity",
        type: "error",
    },
    {
        inputs: [],
        name: "CallerNotVetoCouncilMember",
        type: "error",
    },
    {
        inputs: [],
        name: "CannotDelayBucketThatNeedsToUpdateSlashNonce",
        type: "error",
    },
    {
        inputs: [],
        name: "CannotDelayEmptyBucket",
        type: "error",
    },
    {
        inputs: [],
        name: "ElectricityFutureAuctionBidMustBeGreaterThanMinimumBid",
        type: "error",
    },
    {
        inputs: [],
        name: "ElectricityFuturesAuctionAuthorizationTooLong",
        type: "error",
    },
    {
        inputs: [],
        name: "ElectricityFuturesAuctionBidTooLow",
        type: "error",
    },
    {
        inputs: [],
        name: "ElectricityFuturesAuctionEnded",
        type: "error",
    },
    {
        inputs: [],
        name: "ElectricityFuturesAuctionInvalidSignature",
        type: "error",
    },
    {
        inputs: [],
        name: "ElectricityFuturesSignatureExpired",
        type: "error",
    },
    {
        inputs: [],
        name: "GlowWeightGreaterThanTotalWeight",
        type: "error",
    },
    {
        inputs: [],
        name: "GlowWeightOverflow",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidProof",
        type: "error",
    },
    {
        inputs: [],
        name: "NotUSDCToken",
        type: "error",
    },
    {
        inputs: [],
        name: "SignatureDoesNotMatchUser",
        type: "error",
    },
    {
        inputs: [],
        name: "SignerNotGCA",
        type: "error",
    },
    {
        inputs: [],
        name: "USDCWeightGreaterThanTotalWeight",
        type: "error",
    },
    {
        inputs: [],
        name: "USDCWeightOverflow",
        type: "error",
    },
    {
        inputs: [],
        name: "UserAlreadyClaimed",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "bucketId",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "glwWeight",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "USDCWeight",
                type: "uint256",
            },
            {
                internalType: "bytes32[]",
                name: "proof",
                type: "bytes32[]",
            },
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "user",
                type: "address",
            },
            {
                internalType: "bool",
                name: "claimFromInflation",
                type: "bool",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
        ],
        name: "claimRewardFromBucket",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "bucketId",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "glwWeight",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "USDCWeight",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "claimFromInflation",
                type: "bool",
            },
        ],
        name: "createClaimRewardFromBucketDigest",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "bucketId",
                type: "uint256",
            },
        ],
        name: "delayBucketFinalization",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "donateToUSDCMinerRewardsPool",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "donateToUSDCMinerRewardsPoolEarlyLiquidity",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "bucketId",
                type: "uint256",
            },
        ],
        name: "hasBucketBeenDelayed",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
export class IMinerPool__factory {
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=IMinerPool__factory.js.map